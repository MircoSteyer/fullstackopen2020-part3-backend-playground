{"version":3,"sources":["Components/Note.js","services/notes.js","Components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","deleteNote","label","important","key","id","className","content","onClick","baseURL","axios","get","then","response","data","newNote","post","put","delete","status","Notification","message","App","useState","notes","setNotes","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","map","noteToToggle","catch","e","setTimeout","toggleNoteImportance","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.640f3e7a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({note, toggleImportance, deleteNote}) => {\r\n\r\n    const label = note.important ? \"Make unimportant\" : \"Make important\"\r\n\r\n    return (\r\n        <li key={note.id} className={\"note\"}>\r\n            {note.content}\r\n            <button onClick={toggleImportance} className={\"noteButton\"}>{label}</button>\r\n            <button onClick={deleteNote} className={\"noteButton\"}>DELETE</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note\r\n","//Service for get notes, post notes, put notes\r\nimport axios from \"axios\"\r\n\r\nconst baseURL = `https://salty-gorge-28777.herokuapp.com/api/notes`\r\n\r\nconst getAllNotes = () => {\r\n    const request = axios.get(baseURL)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst postNote = (newNote) => {\r\n    const request = axios.post(baseURL, newNote)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst putNote = (id, newNote) => {\r\n    const request = axios.put(`${baseURL}/${id}`, newNote)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteNote = (id) => {\r\n    axios.delete(`${baseURL}/${id}`).then(response => response.status)\r\n}\r\n\r\nexport default {\r\n    getAllNotes,\r\n    postNote,\r\n    putNote,\r\n    deleteNote,\r\n}\r\n","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n\r\n    if (message === null) return null\r\n\r\n    return (\r\n        <div className={\"notification\"}>\r\n            {message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notification;","import React, {useState, useEffect} from \"react\";\r\nimport Note from \"./Components/Note\";\r\nimport noteService from \"./services/notes\"\r\nimport Notification from \"./Components/Notification\";\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState(\"\")\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect(() => {\r\n        noteService.getAllNotes()\r\n            .then(response => {setNotes(response)})\r\n    },[])\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\r\n\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5\r\n        }\r\n\r\n        noteService.postNote(noteObject)\r\n            .then(response => {\r\n                setNotes(notes.concat(response))\r\n                setNewNote(\"\")}\r\n        )\r\n    }\r\n\r\n    const deleteNote = (id) => {\r\n        noteService.deleteNote(id)\r\n        setNotes(notes.filter(note => note.id !== id))\r\n    }\r\n\r\n    const toggleNoteImportance = (noteToToggle) => {\r\n        const newNote = {...noteToToggle, important: !noteToToggle.important}\r\n        noteService\r\n            .putNote(noteToToggle.id, newNote)\r\n            .then(response => {\r\n                setNotes(notes.map(note => noteToToggle.id === note.id ? response : note))})\r\n            // catch in case the note was already removed from the server an can't be found\r\n            .catch(e => {\r\n                setErrorMessage(`Note \"${noteToToggle.content}\" could not be found as it has already been removed.`)\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(note => note.id !== noteToToggle.id))\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage}/>\r\n            <ul>\r\n                {notesToShow.map(note =>\r\n                    <Note key={note.id} note={note} toggleImportance={() => toggleNoteImportance(note)} deleteNote={() => deleteNote(note.id)}/>\r\n                    )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote} onChange={handleNoteChange}/>\r\n                <button type={\"submit\"}>Save</button>\r\n            </form>\r\n            <button onClick={() => setShowAll(!showAll)}>{showAll ? \"Only show important notes.\" : \"Show all notes.\"}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\n"],"sourceRoot":""}